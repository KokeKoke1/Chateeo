@using Chateeo.Services
@using Chateeo.Services.Authentication
@using Chateeo.Views
@using SharedLibrary.Models
@using System.Timers

@inject AuthenticationService authenticationService
@inject ChatsService _chatsService

<div class="d-flex flex-column" style="font-size: 1.2rem;">
	@if (chats != null) {
		@if (chats.Any())
		{
			foreach (var c in chats)
			{
				<div class="bg-gray p-2 m-2" @onclick='() => SetChat(c)'>
					<div class="icon-chat mb-2" style="background: rgb(216,32,34);">
						<svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-chat" viewBox="0 0 16 16">
							<path d="M2.678 11.894a1 1 0 0 1 .287.801 11 11 0 0 1-.398 2c1.395-.323 2.247-.697 2.634-.893a1 1 0 0 1 .71-.074A8 8 0 0 0 8 14c3.996 0 7-2.807 7-6s-3.004-6-7-6-7 2.808-7 6c0 1.468.617 2.83 1.678 3.894m-.493 3.905a22 22 0 0 1-.713.129c-.2.032-.352-.176-.273-.362a10 10 0 0 0 .244-.637l.003-.01c.248-.72.45-1.548.524-2.319C.743 11.37 0 9.76 0 8c0-3.866 3.582-7 8-7s8 3.134 8 7-3.582 7-8 7a9 9 0 0 1-2.347-.306c-.52.263-1.639.742-3.468 1.105" />
						</svg>
						<div class="name-chat">
							@c.Service
						</div>
					</div>
					<div class="nameuser-chat">
						Odbiorca: @c.Name
					</div>
				</div>
			}
		}
	}
</div>


@code {
	private Chats[] chats;
	private async Task SetChat(Chats chat)
	{
		await App.Current.MainPage.Navigation.PushAsync(new ChatPage(authenticationService, chat));
	}
	protected override async Task OnInitializedAsync()
	{
		chats = await _chatsService.GetChats();
		chats.Reverse();
		System.Timers.Timer aTimer = new System.Timers.Timer();
		aTimer.Elapsed += new ElapsedEventHandler(CallbackAsync);
		aTimer.Interval = 10000;
		aTimer.Enabled = true;
	}
	private async void CallbackAsync(object source, ElapsedEventArgs e)
	{
		chats = await _chatsService.GetChats();
		await InvokeAsync(StateHasChanged);
	}
}